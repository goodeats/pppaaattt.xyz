// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Layer model represents individual layers in the design.
// Each layer can have a hierarchical structure with a parent layer.
// The main node layer has no parent
// The main node layer should also have all design attributes defined (will set defaults later)
// Layers are associated with design attributes.
// Layers without design attributes adopt from their parent
// Layers can have many layer children
// Child layers with a design attribute will override the parent
model Layer {
  id               String            @id @default(uuid())
  title            String
  description      String?
  parentId         String?
  parent           Layer?            @relation("LayerToLayer", fields: [parentId], references: [id])
  children         Layer[]           @relation("LayerToLayer")
  designAttributes DesignAttribute[]

  @@index([parentId])
}

// DesignAttribute model represents a single specific design property, like sideLength, color, etc.
// Each attribute is of a specific type, defined by the AttributeType enum.
// Filter attributes have an additional sub-type defined by the FilterType enum.
model DesignAttribute {
  id      String  @id @default(uuid())
  layerId String?
  layer   Layer?  @relation(fields: [layerId], references: [id])

  attributeType AttributeType // Defines the main type of the design attribute.
  filterType    FilterType? // Defines the sub-type for filter attributes (if filter).

  inputParameters InputParameters? // Each design attribute is linked to input parameters that define its values.

  @@index([layerId]) // Index on layerId
  @@index([attributeType, filterType]) // Composite index on attributeType and filterType
}

// Enum for the main types of design attributes.
enum AttributeType {
  container
  palette
  position
  sideLength
  strokeStyle
  fillStyle
  lineWidth
  rotation
  filter
}

// Enum for filter sub-types, applicable only if the main attribute type is 'filter'.
enum FilterType {
  blur
  opacity
}

// InputParameters define how values for design attributes are determined.
// Supports different types like 'explicit', 'random', and 'range'.
// This unified model simplifies queries and maintenance while providing flexibility.
model InputParameters {
  id                String          @id @default(uuid())
  designAttributeId String          @unique
  designAttribute   DesignAttribute @relation(fields: [designAttributeId], references: [id])
  inputType         InputType // Type of input ('explicit', 'random', 'range').
  explicitValue     Json? // Used for 'explicit' type.
  randomValues      Json? // Used for 'random' type, includes weights for values.
  minValue          Float? // Minimum value for 'range' type.
  maxValue          Float? // Maximum value for 'range' type.

  @@index([designAttributeId]) // Index on designAttributeId
}

// Enum for the types of input parameters.
enum InputType {
  explicit
  random
  range
}
